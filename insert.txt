-- Insert Sample Customers
INSERT INTO customers (name, email, phone, date_of_birth, gender, address, membership_type, points, last_visit) VALUES
('John Customer', 'john.customer@email.com', '555-2001', '1985-03-15', 'Male', '123 Main St, New York, NY 10001', 'Gold', 1500, '2024-08-05 19:30:00'),
('Jane Moviegoer', 'jane.moviegoer@email.com', '555-2002', '1990-07-22', 'Female', '456 Oak Ave, Brooklyn, NY 11201', 'Silver', 750, '2024-08-06 15:45:00'),
('Bob Filmfan', 'bob.filmfan@email.com', '555-2003', '1988-11-08', 'Male', '789 Pine St, New York, NY 10003', 'Regular', 250, '2024-08-04 21:15:00'),
('Alice Cinephile', 'alice.cinephile@email.com', '555-2004', '1975-05-12', 'Female', '321 Elm St, New York, NY 10002', 'Platinum', 2800, '2024-08-07 12:30:00'),
('Charlie Brown', 'charlie.brown@email.com', '555-2005', '1992-09-30', 'Male', '654 Maple Dr, Queens, NY 11375', 'Regular', 180, '2024-07-28 18:00:00'),
('Diana Prince', 'diana.prince@email.com', '555-2006', '1987-12-25', 'Female', '987 Cedar Ln, Manhattan, NY 10019', 'Gold', 1250, '2024-08-06 20:45:00'),
('Eva Martinez', 'eva.martinez@email.com', '555-2007', '1995-04-18', 'Female', '147 Birch St, Bronx, NY 10451', 'Silver',-- =====================================================
-- CINEMA MANAGEMENT SYSTEM - COMPLETE MySQL SCRIPT
-- =====================================================

-- Create Database
DROP DATABASE IF EXISTS cinema_management;
CREATE DATABASE cinema_management;
USE cinema_management;

-- =====================================================
-- TABLE CREATION
-- =====================================================

-- Cinemas Table
CREATE TABLE cinemas (
    cinema_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    address TEXT,
    city VARCHAR(50),
    state VARCHAR(50),
    zip_code VARCHAR(10),
    phone VARCHAR(20),
    email VARCHAR(100),
    manager VARCHAR(100),
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('Active', 'Inactive', 'Under Renovation') DEFAULT 'Active'
);

-- Halls Table
CREATE TABLE halls (
    hall_id INT PRIMARY KEY AUTO_INCREMENT,
    cinema_id INT NOT NULL,
    name VARCHAR(50) NOT NULL,
    capacity INT NOT NULL,
    screen_type ENUM('Standard', 'IMAX', '3D', '4DX', 'VIP') DEFAULT 'Standard',
    sound_system VARCHAR(50),
    status ENUM('Active', 'Maintenance', 'Closed') DEFAULT 'Active',
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (cinema_id) REFERENCES cinemas(cinema_id) ON DELETE CASCADE
);

-- Seats Table
CREATE TABLE seats (
    seat_id INT PRIMARY KEY AUTO_INCREMENT,
    hall_id INT NOT NULL,
    row_number VARCHAR(5) NOT NULL,
    seat_number INT NOT NULL,
    seat_type ENUM('Regular', 'Premium', 'VIP', 'Disabled Access') DEFAULT 'Regular',
    status ENUM('Available', 'Maintenance', 'Blocked') DEFAULT 'Available',
    price_modifier DECIMAL(5,2) DEFAULT 1.00,
    FOREIGN KEY (hall_id) REFERENCES halls(hall_id) ON DELETE CASCADE,
    UNIQUE KEY unique_seat (hall_id, row_number, seat_number)
);

-- Distributors Table
CREATE TABLE distributors (
    distributor_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    contact_person VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(20),
    address TEXT,
    commission_rate DECIMAL(5,2),
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Movies Table
CREATE TABLE movies (
    movie_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(200) NOT NULL,
    genre VARCHAR(100),
    duration INT, -- in minutes
    rating VARCHAR(10),
    language VARCHAR(50),
    director VARCHAR(100),
    cast TEXT,
    description TEXT,
    release_date DATE,
    distributor_id INT,
    status ENUM('Coming Soon', 'Now Showing', 'Ended') DEFAULT 'Coming Soon',
    poster_url VARCHAR(500),
    trailer_url VARCHAR(500),
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (distributor_id) REFERENCES distributors(distributor_id)
);

-- Movie Purchases Table (Cinema buying rights)
CREATE TABLE movie_purchases (
    purchase_id INT PRIMARY KEY AUTO_INCREMENT,
    movie_id INT NOT NULL,
    cinema_id INT NOT NULL,
    purchase_cost DECIMAL(10,2),
    license_start_date DATE,
    license_end_date DATE,
    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    terms TEXT,
    FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
    FOREIGN KEY (cinema_id) REFERENCES cinemas(cinema_id)
);

-- Movie Purchase Payments Table
CREATE TABLE movie_purchase_payments (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    purchase_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_date DATE NOT NULL,
    payment_method ENUM('Bank Transfer', 'Check', 'Credit Card', 'Cash') DEFAULT 'Bank Transfer',
    reference_number VARCHAR(100),
    status ENUM('Pending', 'Completed', 'Failed', 'Cancelled') DEFAULT 'Pending',
    FOREIGN KEY (purchase_id) REFERENCES movie_purchases(purchase_id)
);

-- Showtimes Table
CREATE TABLE showtimes (
    showtime_id INT PRIMARY KEY AUTO_INCREMENT,
    movie_id INT NOT NULL,
    hall_id INT NOT NULL,
    showtime DATETIME NOT NULL,
    base_price DECIMAL(8,2) NOT NULL,
    available_seats INT,
    total_seats INT,
    status ENUM('Scheduled', 'Ongoing', 'Completed', 'Cancelled') DEFAULT 'Scheduled',
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (movie_id) REFERENCES movies(movie_id),
    FOREIGN KEY (hall_id) REFERENCES halls(hall_id)
);

-- Customers Table
CREATE TABLE customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone VARCHAR(20),
    date_of_birth DATE,
    gender ENUM('Male', 'Female', 'Other'),
    address TEXT,
    membership_type ENUM('Regular', 'Silver', 'Gold', 'Platinum') DEFAULT 'Regular',
    points INT DEFAULT 0,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_visit TIMESTAMP,
    status ENUM('Active', 'Inactive', 'Blocked') DEFAULT 'Active'
);

-- Employees Table
CREATE TABLE employees (
    employee_id INT PRIMARY KEY AUTO_INCREMENT,
    cinema_id INT,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(20),
    position VARCHAR(50),
    department VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10,2),
    status ENUM('Active', 'Inactive', 'On Leave') DEFAULT 'Active',
    manager_id INT,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (cinema_id) REFERENCES cinemas(cinema_id),
    FOREIGN KEY (manager_id) REFERENCES employees(employee_id)
);

-- Promotions Table
CREATE TABLE promotions (
    promotion_id INT PRIMARY KEY AUTO_INCREMENT,
    promotion_name VARCHAR(100) NOT NULL,
    description TEXT,
    discount_type ENUM('Percentage', 'Fixed Amount', 'Buy One Get One') DEFAULT 'Percentage',
    discount_value DECIMAL(8,2),
    start_date DATE,
    end_date DATE,
    applicable_days SET('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'),
    min_tickets INT DEFAULT 1,
    max_discount DECIMAL(8,2),
    status ENUM('Active', 'Inactive', 'Expired') DEFAULT 'Active',
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Bookings Table
CREATE TABLE bookings (
    booking_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT NOT NULL,
    showtime_id INT NOT NULL,
    booking_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10,2),
    discount_amount DECIMAL(10,2) DEFAULT 0,
    final_amount DECIMAL(10,2),
    promotion_id INT,
    booking_status ENUM('Confirmed', 'Cancelled', 'No Show', 'Refunded') DEFAULT 'Confirmed',
    booking_reference VARCHAR(20) UNIQUE,
    processed_by INT, -- employee who processed
    special_requests TEXT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (showtime_id) REFERENCES showtimes(showtime_id),
    FOREIGN KEY (promotion_id) REFERENCES promotions(promotion_id),
    FOREIGN KEY (processed_by) REFERENCES employees(employee_id)
);

-- Booking Seats Table
CREATE TABLE booking_seats (
    booking_seat_id INT PRIMARY KEY AUTO_INCREMENT,
    booking_id INT NOT NULL,
    seat_id INT NOT NULL,
    seat_price DECIMAL(8,2),
    FOREIGN KEY (booking_id) REFERENCES bookings(booking_id) ON DELETE CASCADE,
    FOREIGN KEY (seat_id) REFERENCES seats(seat_id),
    UNIQUE KEY unique_booking_seat (booking_id, seat_id)
);

-- Payments Table
CREATE TABLE payments (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    booking_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_method ENUM('Credit Card', 'Debit Card', 'Cash', 'Digital Wallet', 'Points') DEFAULT 'Credit Card',
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    transaction_id VARCHAR(100),
    payment_status ENUM('Pending', 'Completed', 'Failed', 'Refunded') DEFAULT 'Pending',
    gateway_response TEXT,
    FOREIGN KEY (booking_id) REFERENCES bookings(booking_id)
);

-- Suppliers Table
CREATE TABLE suppliers (
    supplier_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    contact_person VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(20),
    address TEXT,
    supplier_type ENUM('Food & Beverage', 'Equipment', 'Maintenance', 'Cleaning', 'Other') DEFAULT 'Other',
    payment_terms VARCHAR(100),
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('Active', 'Inactive') DEFAULT 'Active'
);

-- Inventory Items Table
CREATE TABLE inventory_items (
    item_id INT PRIMARY KEY AUTO_INCREMENT,
    item_name VARCHAR(100) NOT NULL,
    category ENUM('Concession Food', 'Beverages', 'Equipment', 'Cleaning Supplies', 'Office Supplies', 'Other') DEFAULT 'Other',
    current_stock INT DEFAULT 0,
    minimum_threshold INT DEFAULT 10,
    unit_cost DECIMAL(8,2),
    selling_price DECIMAL(8,2),
    supplier_id INT,
    last_restocked DATE,
    expiry_date DATE,
    location VARCHAR(100),
    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)
);

-- Purchase Orders Table
CREATE TABLE purchase_orders (
    purchase_order_id INT PRIMARY KEY AUTO_INCREMENT,
    supplier_id INT NOT NULL,
    cinema_id INT NOT NULL,
    order_date DATE NOT NULL,
    expected_delivery_date DATE,
    delivery_date DATE,
    total_amount DECIMAL(10,2),
    order_status ENUM('Pending', 'Approved', 'Shipped', 'Delivered', 'Cancelled') DEFAULT 'Pending',
    notes TEXT,
    created_by INT,
    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id),
    FOREIGN KEY (cinema_id) REFERENCES cinemas(cinema_id),
    FOREIGN KEY (created_by) REFERENCES employees(employee_id)
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

CREATE INDEX idx_showtimes_datetime ON showtimes(showtime);
CREATE INDEX idx_bookings_date ON bookings(booking_date);
CREATE INDEX idx_bookings_customer ON bookings(customer_id);
CREATE INDEX idx_bookings_showtime ON bookings(showtime_id);
CREATE INDEX idx_payments_date ON payments(payment_date);
CREATE INDEX idx_movies_status ON movies(status);
CREATE INDEX idx_customers_email ON customers(email);

-- =====================================================
-- SAMPLE DATA INSERTION
-- =====================================================

-- Insert Sample Cinemas
INSERT INTO cinemas (name, address, city, state, zip_code, phone, email, manager) VALUES
('CinePlex Downtown', '123 Main St', 'New York', 'NY', '10001', '555-0101', 'downtown@cineplex.com', 'John Manager'),
('CinePlex Mall', '456 Shopping Center', 'New York', 'NY', '10002', '555-0102', 'mall@cineplex.com', 'Jane Smith'),
('CinePlex Suburb', '789 Suburb Ave', 'Brooklyn', 'NY', '11201', '555-0103', 'suburb@cineplex.com', 'Bob Wilson');

-- Insert Sample Halls
INSERT INTO halls (cinema_id, name, capacity, screen_type) VALUES
(1, 'Hall A', 120, 'IMAX'),
(1, 'Hall B', 80, 'Standard'),
(1, 'Hall C', 100, '3D'),
(2, 'Hall 1', 150, 'Standard'),
(2, 'Hall 2', 90, 'VIP'),
(3, 'Main Hall', 200, 'Standard');

-- Insert Sample Seats (Complete seating for halls)
-- Hall 1 (IMAX - 120 seats)
INSERT INTO seats (hall_id, row_number, seat_number, seat_type, price_modifier) VALUES
-- Row A (10 seats)
(1, 'A', 1, 'Regular', 1.00), (1, 'A', 2, 'Regular', 1.00), (1, 'A', 3, 'Regular', 1.00), (1, 'A', 4, 'Regular', 1.00), (1, 'A', 5, 'Regular', 1.00),
(1, 'A', 6, 'Regular', 1.00), (1, 'A', 7, 'Regular', 1.00), (1, 'A', 8, 'Regular', 1.00), (1, 'A', 9, 'Regular', 1.00), (1, 'A', 10, 'Regular', 1.00),
-- Row B (12 seats)
(1, 'B', 1, 'Regular', 1.00), (1, 'B', 2, 'Regular', 1.00), (1, 'B', 3, 'Regular', 1.00), (1, 'B', 4, 'Regular', 1.00), (1, 'B', 5, 'Regular', 1.00), (1, 'B', 6, 'Regular', 1.00),
(1, 'B', 7, 'Regular', 1.00), (1, 'B', 8, 'Regular', 1.00), (1, 'B', 9, 'Regular', 1.00), (1, 'B', 10, 'Regular', 1.00), (1, 'B', 11, 'Regular', 1.00), (1, 'B', 12, 'Regular', 1.00),
-- Row C (12 seats)
(1, 'C', 1, 'Regular', 1.00), (1, 'C', 2, 'Regular', 1.00), (1, 'C', 3, 'Regular', 1.00), (1, 'C', 4, 'Regular', 1.00), (1, 'C', 5, 'Regular', 1.00), (1, 'C', 6, 'Regular', 1.00),
(1, 'C', 7, 'Regular', 1.00), (1, 'C', 8, 'Regular', 1.00), (1, 'C', 9, 'Regular', 1.00), (1, 'C', 10, 'Regular', 1.00), (1, 'C', 11, 'Regular', 1.00), (1, 'C', 12, 'Regular', 1.00),
-- Row D-F (Premium rows, 14 seats each)
(1, 'D', 1, 'Premium', 1.25), (1, 'D', 2, 'Premium', 1.25), (1, 'D', 3, 'Premium', 1.25), (1, 'D', 4, 'Premium', 1.25), (1, 'D', 5, 'Premium', 1.25), (1, 'D', 6, 'Premium', 1.25), (1, 'D', 7, 'Premium', 1.25),
(1, 'D', 8, 'Premium', 1.25), (1, 'D', 9, 'Premium', 1.25), (1, 'D', 10, 'Premium', 1.25), (1, 'D', 11, 'Premium', 1.25), (1, 'D', 12, 'Premium', 1.25), (1, 'D', 13, 'Premium', 1.25), (1, 'D', 14, 'Premium', 1.25),
(1, 'E', 1, 'Premium', 1.25), (1, 'E', 2, 'Premium', 1.25), (1, 'E', 3, 'Premium', 1.25), (1, 'E', 4, 'Premium', 1.25), (1, 'E', 5, 'Premium', 1.25), (1, 'E', 6, 'Premium', 1.25), (1, 'E', 7, 'Premium', 1.25),
(1, 'E', 8, 'Premium', 1.25), (1, 'E', 9, 'Premium', 1.25), (1, 'E', 10, 'Premium', 1.25), (1, 'E', 11, 'Premium', 1.25), (1, 'E', 12, 'Premium', 1.25), (1, 'E', 13, 'Premium', 1.25), (1, 'E', 14, 'Premium', 1.25),
(1, 'F', 1, 'Premium', 1.25), (1, 'F', 2, 'Premium', 1.25), (1, 'F', 3, 'Premium', 1.25), (1, 'F', 4, 'Premium', 1.25), (1, 'F', 5, 'Premium', 1.25), (1, 'F', 6, 'Premium', 1.25), (1, 'F', 7, 'Premium', 1.25),
(1, 'F', 8, 'Premium', 1.25), (1, 'F', 9, 'Premium', 1.25), (1, 'F', 10, 'Premium', 1.25), (1, 'F', 11, 'Premium', 1.25), (1, 'F', 12, 'Premium', 1.25), (1, 'F', 13, 'Premium', 1.25), (1, 'F', 14, 'Premium', 1.25),
-- Row G-H (Back rows, 12 seats each)
(1, 'G', 1, 'Regular', 0.9), (1, 'G', 2, 'Regular', 0.9), (1, 'G', 3, 'Regular', 0.9), (1, 'G', 4, 'Regular', 0.9), (1, 'G', 5, 'Regular', 0.9), (1, 'G', 6, 'Regular', 0.9),
(1, 'G', 7, 'Regular', 0.9), (1, 'G', 8, 'Regular', 0.9), (1, 'G', 9, 'Regular', 0.9), (1, 'G', 10, 'Regular', 0.9), (1, 'G', 11, 'Regular', 0.9), (1, 'G', 12, 'Regular', 0.9),
(1, 'H', 1, 'Regular', 0.9), (1, 'H', 2, 'Regular', 0.9), (1, 'H', 3, 'Regular', 0.9), (1, 'H', 4, 'Regular', 0.9), (1, 'H', 5, 'Regular', 0.9), (1, 'H', 6, 'Regular', 0.9),
(1, 'H', 7, 'Regular', 0.9), (1, 'H', 8, 'Regular', 0.9), (1, 'H', 9, 'Regular', 0.9), (1, 'H', 10, 'Regular', 0.9), (1, 'H', 11, 'Regular', 0.9), (1, 'H', 12, 'Regular', 0.9);

-- Hall 2 (Standard - 80 seats)
INSERT INTO seats (hall_id, row_number, seat_number, seat_type, price_modifier) VALUES
-- Rows A-H (10 seats each)
(2, 'A', 1, 'Regular', 1.0), (2, 'A', 2, 'Regular', 1.0), (2, 'A', 3, 'Regular', 1.0), (2, 'A', 4, 'Regular', 1.0), (2, 'A', 5, 'Regular', 1.0),
(2, 'A', 6, 'Regular', 1.0), (2, 'A', 7, 'Regular', 1.0), (2, 'A', 8, 'Regular', 1.0), (2, 'A', 9, 'Regular', 1.0), (2, 'A', 10, 'Regular', 1.0),
(2, 'B', 1, 'Regular', 1.0), (2, 'B', 2, 'Regular', 1.0), (2, 'B', 3, 'Regular', 1.0), (2, 'B', 4, 'Regular', 1.0), (2, 'B', 5, 'Regular', 1.0),
(2, 'B', 6, 'Regular', 1.0), (2, 'B', 7, 'Regular', 1.0), (2, 'B', 8, 'Regular', 1.0), (2, 'B', 9, 'Regular', 1.0), (2, 'B', 10, 'Regular', 1.0),
(2, 'C', 1, 'Regular', 1.0), (2, 'C', 2, 'Regular', 1.0), (2, 'C', 3, 'Regular', 1.0), (2, 'C', 4, 'Regular', 1.0), (2, 'C', 5, 'Regular', 1.0),
(2, 'C', 6, 'Regular', 1.0), (2, 'C', 7, 'Regular', 1.0), (2, 'C', 8, 'Regular', 1.0), (2, 'C', 9, 'Regular', 1.0), (2, 'C', 10, 'Regular', 1.0),
(2, 'D', 1, 'Premium', 1.2), (2, 'D', 2, 'Premium', 1.2), (2, 'D', 3, 'Premium', 1.2), (2, 'D', 4, 'Premium', 1.2), (2, 'D', 5, 'Premium', 1.2),
(2, 'D', 6, 'Premium', 1.2), (2, 'D', 7, 'Premium', 1.2), (2, 'D', 8, 'Premium', 1.2), (2, 'D', 9, 'Premium', 1.2), (2, 'D', 10, 'Premium', 1.2),
(2, 'E', 1, 'Premium', 1.2), (2, 'E', 2, 'Premium', 1.2), (2, 'E', 3, 'Premium', 1.2), (2, 'E', 4, 'Premium', 1.2), (2, 'E', 5, 'Premium', 1.2),
(2, 'E', 6, 'Premium', 1.2), (2, 'E', 7, 'Premium', 1.2), (2, 'E', 8, 'Premium', 1.2), (2, 'E', 9, 'Premium', 1.2), (2, 'E', 10, 'Premium', 1.2),
(2, 'F', 1, 'Regular', 0.9), (2, 'F', 2, 'Regular', 0.9), (2, 'F', 3, 'Regular', 0.9), (2, 'F', 4, 'Regular', 0.9), (2, 'F', 5, 'Regular', 0.9),
(2, 'F', 6, 'Regular', 0.9), (2, 'F', 7, 'Regular', 0.9), (2, 'F', 8, 'Regular', 0.9), (2, 'F', 9, 'Regular', 0.9), (2, 'F', 10, 'Regular', 0.9),
(2, 'G', 1, 'Regular', 0.9), (2, 'G', 2, 'Regular', 0.9), (2, 'G', 3, 'Regular', 0.9), (2, 'G', 4, 'Regular', 0.9), (2, 'G', 5, 'Regular', 0.9),
(2, 'G', 6, 'Regular', 0.9), (2, 'G', 7, 'Regular', 0.9), (2, 'G', 8, 'Regular', 0.9), (2, 'G', 9, 'Regular', 0.9), (2, 'G', 10, 'Regular', 0.9),
(2, 'H', 1, 'Regular', 0.9), (2, 'H', 2, 'Regular', 0.9), (2, 'H', 3, 'Regular', 0.9), (2, 'H', 4, 'Regular', 0.9), (2, 'H', 5, 'Regular', 0.9),
(2, 'H', 6, 'Regular', 0.9), (2, 'H', 7, 'Regular', 0.9), (2, 'H', 8, 'Regular', 0.9), (2, 'H', 9, 'Regular', 0.9), (2, 'H', 10, 'Regular', 0.9);

-- Insert Sample Distributors
INSERT INTO distributors (name, contact_person, email, phone, commission_rate) VALUES
('Warner Bros Distribution', 'Alice Cooper', 'alice@warnerbros.com', '555-1001', 15.00),
('Universal Pictures Distribution', 'Bob Dylan', 'bob@universalpictures.com', '555-1002', 12.50),
('Disney Studios Distribution', 'Carol King', 'carol@disneystudios.com', '555-1003', 18.00),
('Sony Pictures Entertainment', 'David Bowie', 'david@sonypictures.com', '555-1004', 14.00),
('Paramount Pictures', 'Emma Stone', 'emma@paramount.com', '555-1005', 16.50),
('20th Century Studios', 'Frank Sinatra', 'frank@20thcentury.com', '555-1006', 13.75);

-- Insert Sample Movies
INSERT INTO movies (title, genre, duration, rating, language, director, cast, description, release_date, distributor_id, status, poster_url, trailer_url) VALUES
('Action Hero Returns', 'Action/Adventure', 120, 'PG-13', 'English', 'Michael Bay', 'Tom Cruise, Scarlett Johansson, Chris Evans', 'The ultimate action hero returns for one final mission to save the world from destruction.', '2024-06-01', 1, 'Now Showing', 'http://example.com/poster1.jpg', 'http://example.com/trailer1.mp4'),
('Romantic Comedy Special', 'Romance/Comedy', 95, 'PG', 'English', 'Nancy Meyers', 'Jennifer Aniston, Ryan Gosling, Emma Stone', 'A heartwarming romantic comedy about finding love in unexpected places.', '2024-05-15', 2, 'Now Showing', 'http://example.com/poster2.jpg', 'http://example.com/trailer2.mp4'),
('Space Adventure Galaxy', 'Sci-Fi/Adventure', 140, 'PG-13', 'English', 'Christopher Nolan', 'Matthew McConaughey, Anne Hathaway, Jessica Chastain', 'An epic space adventure that pushes the boundaries of human exploration.', '2024-07-01', 3, 'Coming Soon', 'http://example.com/poster3.jpg', 'http://example.com/trailer3.mp4'),
('Horror Night Terror', 'Horror/Thriller', 110, 'R', 'English', 'Jordan Peele', 'Lupita Nyongo, Winston Duke, Elisabeth Moss', 'A spine-chilling horror experience that will keep you on the edge of your seat.', '2024-05-20', 4, 'Now Showing', 'http://example.com/poster4.jpg', 'http://example.com/trailer4.mp4'),
('Family Fun Adventure', 'Family/Animation', 85, 'G', 'English', 'Pete Docter', 'Voice Cast: Tom Hanks, Amy Poehler, Chris Pratt', 'A delightful animated adventure perfect for the whole family.', '2024-06-10', 3, 'Now Showing', 'http://example.com/poster5.jpg', 'http://example.com/trailer5.mp4'),
('Crime Drama Elite', 'Crime/Drama', 135, 'R', 'English', 'Martin Scorsese', 'Leonardo DiCaprio, Robert De Niro, Al Pacino', 'A gripping crime drama about loyalty, betrayal, and the American dream.', '2024-07-15', 5, 'Coming Soon', 'http://example.com/poster6.jpg', 'http://example.com/trailer6.mp4'),
('Teen Romance High School', 'Romance/Drama', 102, 'PG-13', 'English', 'John Hughes Jr.', 'Zendaya, Timothée Chalamet, Noah Centineo', 'A modern take on high school romance and coming of age.', '2024-08-01', 6, 'Coming Soon', 'http://example.com/poster7.jpg', 'http://example.com/trailer7.mp4');

-- Insert Movie Purchases (Cinema acquiring movie rights)
INSERT INTO movie_purchases (movie_id, cinema_id, purchase_cost, license_start_date, license_end_date, terms) VALUES
(1, 1, 25000.00, '2024-06-01', '2024-08-31', '3-month exclusive license'),
(1, 2, 20000.00, '2024-06-01', '2024-08-31', '3-month standard license'),
(1, 3, 18000.00, '2024-06-01', '2024-08-31', '3-month standard license'),
(2, 1, 15000.00, '2024-05-15', '2024-07-31', '2.5-month license'),
(2, 2, 12000.00, '2024-05-15', '2024-07-31', '2.5-month license'),
(3, 1, 30000.00, '2024-07-01', '2024-09-30', '3-month premium license'),
(4, 1, 22000.00, '2024-05-20', '2024-08-20', '3-month horror special'),
(4, 2, 20000.00, '2024-05-20', '2024-08-20', '3-month standard'),
(5, 1, 18000.00, '2024-06-10', '2024-08-31', 'Family movie license'),
(5, 2, 16000.00, '2024-06-10', '2024-08-31', 'Family movie license'),
(5, 3, 14000.00, '2024-06-10', '2024-08-31', 'Family movie license');

-- Insert Movie Purchase Payments
INSERT INTO movie_purchase_payments (purchase_id, amount, payment_date, payment_method, reference_number, status) VALUES
(1, 25000.00, '2024-05-25', 'Bank Transfer', 'REF001', 'Completed'),
(2, 20000.00, '2024-05-25', 'Bank Transfer', 'REF002', 'Completed'),
(3, 18000.00, '2024-05-26', 'Bank Transfer', 'REF003', 'Completed'),
(4, 7500.00, '2024-05-10', 'Bank Transfer', 'REF004', 'Completed'),
(4, 7500.00, '2024-07-10', 'Bank Transfer', 'REF005', 'Pending'),
(5, 12000.00, '2024-05-10', 'Bank Transfer', 'REF006', 'Completed'),
(6, 30000.00, '2024-06-25', 'Bank Transfer', 'REF007', 'Completed'),
(7, 22000.00, '2024-05-15', 'Check', 'CHK001', 'Completed'),
(8, 20000.00, '2024-05-15', 'Bank Transfer', 'REF008', 'Completed'),
(9, 18000.00, '2024-06-05', 'Bank Transfer', 'REF009', 'Completed'),
(10, 16000.00, '2024-06-05', 'Bank Transfer', 'REF010', 'Completed'),
(11, 14000.00, '2024-06-05', 'Bank Transfer', 'REF011', 'Completed');

-- Insert Sample Customers
INSERT INTO customers (name, email, phone, membership_type, points) VALUES
('John Customer', 'john@email.com', '555-2001', 'Gold', 1500),
('Jane Moviegoer', 'jane@email.com', '555-2002', 'Silver', 750),
('Bob Filmfan', 'bob@email.com', '555-2003', 'Regular', 250);

-- Insert Sample Employees
INSERT INTO employees (cinema_id, name, email, position, department, hire_date, salary) VALUES
(1, 'Alice Staff', 'alice@cinema.com', 'Cashier', 'Box Office', '2024-01-15', 35000),
(1, 'Charlie Usher', 'charlie@cinema.com', 'Usher', 'Operations', '2024-02-01', 30000),
(2, 'Diana Manager', 'diana@cinema.com', 'Assistant Manager', 'Management', '2023-12-01', 50000);

-- Insert Sample Showtimes (Multiple shows per day)
INSERT INTO showtimes (movie_id, hall_id, showtime, base_price, available_seats, total_seats) VALUES
-- Action Hero Returns (Movie 1)
(1, 1, '2024-08-07 09:00:00', 15.00, 118, 120),
(1, 1, '2024-08-07 12:30:00', 15.00, 115, 120),
(1, 1, '2024-08-07 16:00:00', 18.00, 112, 120),
(1, 1, '2024-08-07 19:30:00', 18.00, 110, 120),
(1, 1, '2024-08-07 23:00:00', 16.00, 119, 120),
(1, 2, '2024-08-07 10:00:00', 12.00, 78, 80),
(1, 2, '2024-08-07 14:30:00', 12.00, 75, 80),
(1, 2, '2024-08-07 18:00:00', 14.00, 72, 80),
(1, 2, '2024-08-07 21:30:00', 14.00, 76, 80),
-- Romantic Comedy (Movie 2)
(2, 3, '2024-08-07 11:00:00', 13.00, 95, 100),
(2, 3, '2024-08-07 15:30:00', 13.00, 92, 100),
(2, 3, '2024-08-07 19:00:00', 15.00, 88, 100),
(2, 3, '2024-08-07 22:30:00', 15.00, 97, 100),
(2, 4, '2024-08-07 13:00:00', 16.00, 145, 150),
(2, 4, '2024-08-07 17:30:00', 18.00, 140, 150),
(2, 4, '2024-08-07 21:00:00', 18.00, 138, 150),
-- Horror Night Terror (Movie 4)
(4, 2, '2024-08-07 22:00:00', 16.00, 65, 80),
(4, 3, '2024-08-07 23:30:00', 16.00, 85, 100),
-- Family Fun Adventure (Movie 5)
(5, 4, '2024-08-07 10:00:00', 12.00, 148, 150),
(5, 4, '2024-08-07 13:30:00', 12.00, 145, 150),
(5, 5, '2024-08-07 11:30:00', 20.00, 88, 90),
(5, 5, '2024-08-07 15:00:00', 20.00, 85, 90),
(5, 6, '2024-08-07 12:00:00', 14.00, 195, 200),
(5, 6, '2024-08-07 16:30:00', 14.00, 190, 200),
-- Next day showtimes
(1, 1, '2024-08-08 09:00:00', 15.00, 120, 120),
(1, 1, '2024-08-08 12:30:00', 15.00, 120, 120),
(1, 1, '2024-08-08 16:00:00', 18.00, 120, 120),
(1, 1, '2024-08-08 19:30:00', 18.00, 120, 120),
(2, 2, '2024-08-08 14:00:00', 12.00, 80, 80),
(2, 2, '2024-08-08 18:30:00', 14.00, 80, 80),
(5, 4, '2024-08-08 10:30:00', 12.00, 150, 150);

-- Insert Sample Promotions
INSERT INTO promotions (promotion_name, description, discount_type, discount_value, start_date, end_date) VALUES
('Student Discount', '20% off for students with valid ID', 'Percentage', 20.00, '2024-08-01', '2024-08-31'),
('Family Pack', '$5 off for 4 or more tickets', 'Fixed Amount', 5.00, '2024-08-01', '2024-08-31'),
('Tuesday Special', '25% off all Tuesday shows', 'Percentage', 25.00, '2024-08-01', '2024-12-31');

-- Insert Sample Bookings
INSERT INTO bookings (customer_id, showtime_id, total_amount, final_amount, booking_reference, processed_by) VALUES
(1, 1, 36.00, 36.00, 'BK001', 1),
(2, 2, 28.00, 28.00, 'BK002', 1),
(3, 1, 15.00, 15.00, 'BK003', 2);

-- Insert Sample Booking Seats
INSERT INTO booking_seats (booking_id, seat_id, seat_price) VALUES
(1, 1, 18.00), (1, 2, 18.00),
(2, 7, 14.00), (2, 8, 14.00),
(3, 3, 15.00);

-- Insert Sample Payments
INSERT INTO payments (booking_id, amount, payment_method, payment_status, transaction_id) VALUES
(1, 36.00, 'Credit Card', 'Completed', 'TXN001'),
(2, 28.00, 'Debit Card', 'Completed', 'TXN002'),
(3, 15.00, 'Cash', 'Completed', 'TXN003');

-- Insert Sample Suppliers
INSERT INTO suppliers (name, contact_person, email, supplier_type) VALUES
('PopcornPlus Inc', 'Sam Kernel', 'sam@popcornplus.com', 'Food & Beverage'),
('CleanScreen Services', 'Maria Clean', 'maria@cleanscreen.com', 'Cleaning'),
('TechCinema Equipment', 'Dave Tech', 'dave@techcinema.com', 'Equipment');

-- Insert Sample Inventory Items
INSERT INTO inventory_items (item_name, category, current_stock, minimum_threshold, unit_cost, selling_price, supplier_id) VALUES
('Popcorn (Large)', 'Concession Food', 50, 20, 2.50, 8.00, 1),
('Coca Cola (Medium)', 'Beverages', 100, 30, 1.50, 5.00, 1),
('Cleaning Supplies Kit', 'Cleaning Supplies', 15, 5, 25.00, NULL, 2);

-- =====================================================
-- ANALYTICAL QUERIES & REPORTS
-- =====================================================

-- =====================================================
-- 1. REVENUE ANALYSIS REPORTS
-- =====================================================

-- Daily Revenue Report
DELIMITER //
CREATE PROCEDURE GetDailyRevenue(IN report_date DATE)
BEGIN
    SELECT
        DATE(s.showtime) as show_date,
        c.name as cinema_name,
        COUNT(DISTINCT b.booking_id) as total_bookings,
        COUNT(bs.seat_id) as tickets_sold,
        COALESCE(SUM(p.amount), 0) as daily_revenue,
        ROUND(AVG(p.amount), 2) as avg_ticket_price
    FROM showtimes s
    JOIN halls h ON s.hall_id = h.hall_id
    JOIN cinemas c ON h.cinema_id = c.cinema_id
    LEFT JOIN bookings b ON s.showtime_id = b.showtime_id AND b.booking_status = 'Confirmed'
    LEFT JOIN booking_seats bs ON b.booking_id = bs.booking_id
    LEFT JOIN payments p ON b.booking_id = p.booking_id AND p.payment_status = 'Completed'
    WHERE DATE(s.showtime) = COALESCE(report_date, CURDATE())
    GROUP BY DATE(s.showtime), c.cinema_id
    ORDER BY daily_revenue DESC;
END //
DELIMITER ;

-- Movie Performance Analysis
DELIMITER //
CREATE PROCEDURE GetMoviePerformance(IN days_back INT)
BEGIN
    SELECT
        m.title,
        m.genre,
        m.rating,
        COUNT(DISTINCT b.booking_id) as total_bookings,
        COUNT(bs.seat_id) as tickets_sold,
        COALESCE(SUM(p.amount), 0) as total_revenue,
        ROUND(AVG(p.amount), 2) as avg_ticket_price,
        ROUND((COUNT(bs.seat_id) * 100.0 / SUM(s.total_seats)), 2) as avg_occupancy_rate
    FROM movies m
    JOIN showtimes s ON m.movie_id = s.movie_id
    LEFT JOIN bookings b ON s.showtime_id = b.showtime_id AND b.booking_status = 'Confirmed'
    LEFT JOIN booking_seats bs ON b.booking_id = bs.booking_id
    LEFT JOIN payments p ON b.booking_id = p.booking_id AND p.payment_status = 'Completed'
    WHERE s.showtime >= DATE_SUB(CURDATE(), INTERVAL COALESCE(days_back, 30) DAY)
    GROUP BY m.movie_id
    HAVING tickets_sold > 0
    ORDER BY total_revenue DESC;
END //
DELIMITER ;

-- =====================================================
-- 2. OPERATIONAL EFFICIENCY REPORTS
-- =====================================================

-- Seat Utilization Analysis
DELIMITER //
CREATE PROCEDURE GetSeatUtilization()
BEGIN
    SELECT
        c.name as cinema_name,
        h.name as hall_name,
        h.capacity,
        HOUR(s.showtime) as show_hour,
        COUNT(bs.seat_id) as seats_sold,
        ROUND((COUNT(bs.seat_id) * 100.0 / h.capacity), 2) as occupancy_rate,
        CASE
            WHEN ROUND((COUNT(bs.seat_id) * 100.0 / h.capacity), 2) >= 90 THEN 'Excellent'
            WHEN ROUND((COUNT(bs.seat_id) * 100.0 / h.capacity), 2) >= 70 THEN 'Good'
            WHEN ROUND((COUNT(bs.seat_id) * 100.0 / h.capacity), 2) >= 50 THEN 'Average'
            ELSE 'Poor'
        END as performance_rating
    FROM cinemas c
    JOIN halls h ON c.cinema_id = h.cinema_id
    JOIN showtimes s ON h.hall_id = s.hall_id
    LEFT JOIN bookings b ON s.showtime_id = b.showtime_id AND b.booking_status = 'Confirmed'
    LEFT JOIN booking_seats bs ON b.booking_id = bs.booking_id
    WHERE s.showtime >= DATE_SUB(NOW(), INTERVAL 7 DAY)
    GROUP BY c.cinema_id, h.hall_id, HOUR(s.showtime)
    ORDER BY cinema_name, hall_name, show_hour;
END //
DELIMITER ;

-- Peak Hours Analysis
DELIMITER //
CREATE PROCEDURE GetPeakHours()
BEGIN
    SELECT
        DAYNAME(s.showtime) as day_name,
        HOUR(s.showtime) as hour_of_day,
        COUNT(b.booking_id) as total_bookings,
        COUNT(bs.seat_id) as tickets_sold,
        COALESCE(SUM(p.amount), 0) as revenue,
        ROUND(AVG(COUNT(bs.seat_id)) OVER (PARTITION BY HOUR(s.showtime)), 1) as avg_tickets_this_hour
    FROM showtimes s
    LEFT JOIN bookings b ON s.showtime_id = b.showtime_id AND b.booking_status = 'Confirmed'
    LEFT JOIN booking_seats bs ON b.booking_id = bs.booking_id
    LEFT JOIN payments p ON b.booking_id = p.booking_id AND p.payment_status = 'Completed'
    WHERE s.showtime >= DATE_SUB(NOW(), INTERVAL 30 DAY)
    GROUP BY DAYNAME(s.showtime), HOUR(s.showtime)
    ORDER BY tickets_sold DESC
    LIMIT 20;
END //
DELIMITER ;

-- =====================================================
-- 3. CUSTOMER ANALYTICS REPORTS
-- =====================================================

-- Customer Lifetime Value Analysis
DELIMITER //
CREATE PROCEDURE GetCustomerLTV()
BEGIN
    SELECT
        cust.customer_id,
        cust.name,
        cust.email,
        cust.membership_type,
        COUNT(DISTINCT b.booking_id) as total_bookings,
        COUNT(bs.seat_id) as total_tickets,
        COALESCE(SUM(p.amount), 0) as lifetime_value,
        ROUND(AVG(p.amount), 2) as avg_spend_per_booking,
        MIN(b.booking_date) as first_booking,
        MAX(b.booking_date) as last_booking,
        DATEDIFF(CURDATE(), MAX(b.booking_date)) as days_since_last_visit
    FROM customers cust
    LEFT JOIN bookings b ON cust.customer_id = b.customer_id AND b.booking_status = 'Confirmed'
    LEFT JOIN booking_seats bs ON b.booking_id = bs.booking_id
    LEFT JOIN payments p ON b.booking_id = p.booking_id AND p.payment_status = 'Completed'
    GROUP BY cust.customer_id
    HAVING total_bookings > 0
    ORDER BY lifetime_value DESC;
END //
DELIMITER ;

-- Customer Segmentation
DELIMITER //
CREATE PROCEDURE GetCustomerSegmentation()
BEGIN
    WITH customer_stats AS (
        SELECT
            c.customer_id,
            COUNT(b.booking_id) as booking_count,
            COALESCE(SUM(p.amount), 0) as total_spent
        FROM customers c
        LEFT JOIN bookings b ON c.customer_id = b.customer_id AND b.booking_status = 'Confirmed'
        LEFT JOIN payments p ON b.booking_id = p.booking_id AND p.payment_status = 'Completed'
        GROUP BY c.customer_id
    )
    SELECT
        CASE
            WHEN booking_count >= 10 THEN 'VIP Customer'
            WHEN booking_count >= 5 THEN 'Regular Customer'
            WHEN booking_count >= 2 THEN 'Occasional Customer'
            WHEN booking_count = 1 THEN 'New Customer'
            ELSE 'Inactive Customer'
        END as customer_segment,
        COUNT(*) as customer_count,
        ROUND(AVG(total_spent), 2) as avg_lifetime_value,
        ROUND(SUM(total_spent), 2) as segment_total_value
    FROM customer_stats
    GROUP BY customer_segment
    ORDER BY avg_lifetime_value DESC;
END //
DELIMITER ;

-- =====================================================
-- 4. FINANCIAL REPORTS
-- =====================================================

-- Movie ROI Analysis
DELIMITER //
CREATE PROCEDURE GetMovieROI()
BEGIN
    SELECT
        m.title,
        d.name as distributor,
        mp.purchase_cost,
        COALESCE(SUM(p.amount), 0) as box_office_revenue,
        (COALESCE(SUM(p.amount), 0) - mp.purchase_cost) as profit_margin,
        CASE
            WHEN mp.purchase_cost > 0 THEN
                ROUND(((COALESCE(SUM(p.amount), 0) - mp.purchase_cost) * 100.0 / mp.purchase_cost), 2)
            ELSE NULL
        END as roi_percentage
    FROM movies m
    JOIN distributors d ON m.distributor_id = d.distributor_id
    LEFT JOIN movie_purchases mp ON m.movie_id = mp.movie_id
    LEFT JOIN showtimes s ON m.movie_id = s.movie_id
    LEFT JOIN bookings b ON s.showtime_id = b.showtime_id AND b.booking_status = 'Confirmed'
    LEFT JOIN payments p ON b.booking_id = p.booking_id AND p.payment_status = 'Completed'
    WHERE mp.purchase_cost IS NOT NULL
    GROUP BY m.movie_id, mp.purchase_cost
    ORDER BY roi_percentage DESC;
END //
DELIMITER ;

-- Promotion Effectiveness
DELIMITER //
CREATE PROCEDURE GetPromotionEffectiveness()
BEGIN
    SELECT
        pr.promotion_name,
        pr.discount_type,
        pr.discount_value,
        pr.start_date,
        pr.end_date,
        COUNT(b.booking_id) as bookings_with_promo,
        COALESCE(SUM(p.amount), 0) as revenue_with_promo,
        COALESCE(SUM(b.discount_amount), 0) as total_discount_given,
        ROUND(AVG(p.amount), 2) as avg_discounted_price,
        ROUND((COALESCE(SUM(b.discount_amount), 0) * 100.0 /
               (COALESCE(SUM(p.amount), 0) + COALESCE(SUM(b.discount_amount), 0))), 2) as discount_percentage
    FROM promotions pr
    LEFT JOIN bookings b ON pr.promotion_id = b.promotion_id AND b.booking_status = 'Confirmed'
    LEFT JOIN payments p ON b.booking_id = p.booking_id AND p.payment_status = 'Completed'
    GROUP BY pr.promotion_id
    HAVING bookings_with_promo > 0
    ORDER BY bookings_with_promo DESC;
END //
DELIMITER ;

-- =====================================================
-- 5. INVENTORY REPORTS
-- =====================================================

-- Inventory Status Report
DELIMITER //
CREATE PROCEDURE GetInventoryStatus()
BEGIN
    SELECT
        ii.item_name,
        ii.category,
        ii.current_stock,
        ii.minimum_threshold,
        ii.unit_cost,
        ii.selling_price,
        s.name as supplier_name,
        CASE
            WHEN ii.current_stock <= ii.minimum_threshold THEN 'URGENT: Reorder Required'
            WHEN ii.current_stock <= (ii.minimum_threshold * 1.5) THEN 'WARNING: Low Stock'
            ELSE 'OK: Adequate Stock'
        END as stock_status,
        DATEDIFF(CURDATE(), ii.last_restocked) as days_since_restock,
        ii.expiry_date
    FROM inventory_items ii
    LEFT JOIN suppliers s ON ii.supplier_id = s.supplier_id
    ORDER BY
        CASE
            WHEN ii.current_stock <= ii.minimum_threshold THEN 1
            WHEN ii.current_stock <= (ii.minimum_threshold * 1.5) THEN 2
            ELSE 3
        END,
        ii.category;
END //
DELIMITER ;

-- =====================================================
--
